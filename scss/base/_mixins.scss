@mixin border-radius($radius: 5px) {
	-webkit-background-clip: padding-box;
	-webkit-border-radius: $radius;
	-moz-background-clip: padding-box;
	-moz-border-radius: $radius;
	border-radius: $radius;
	background-clip: padding-box;
}
@mixin transition($args...) {
	-webkit-transition: $args;
	-moz-transition: $args;
	-ms-transition: $args;
	-o-transition: $args;
	transition: $args;
}
@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie);
}
@mixin gradient($from, $to) {
	background: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background: -moz-linear-gradient(top,  $from, $to);
	filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
}
@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
	@if $inset {
		-webkit-box-shadow:inset $top $left $blur $color;
		-moz-box-shadow:inset $top $left $blur $color;
		box-shadow:inset $top $left $blur $color;
	} @else {
		-webkit-box-shadow: $top $left $blur $color;
		-moz-box-shadow: $top $left $blur $color;
		box-shadow: $top $left $blur $color;
	}
}
@mixin text-overflow($line) {
	display: block;
	display: -webkit-box;
	-webkit-line-clamp: $line;
	-webkit-box-orient: vertical;
	overflow: hidden;
	text-overflow: ellipsis;
}
@mixin color-placeholder($color) {
	::-webkit-input-placeholder {
		color: $color !important;
	}
	::-moz-placeholder {
		color: $color !important;
	}
	:-moz-placeholder {
		color: $color !important;
	}
	:-ms-input-placeholder {
		color: $color !important;
	}
	::-ms-input-placeholder {
		color: $color !important;
	}
	:-ms-input-placeholder {
		color: $color !important;
	}
	:placeholder-shown { 
		color: $color !important;
	}
}
@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}
@mixin rotate ($deg) {
	@include transform(rotate(#{$deg}deg));
}

@mixin scale($scale) {
	@include transform(scale($scale));
} 
@mixin translate ($x, $y) {
	@include transform(translate($x, $y));
}
@mixin translateX ($x) {
	@include transform(translate($x));
}
@mixin translateY ($y) {
	@include transform(translate($y));
}
@mixin skew ($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}
@mixin transform-origin ($origin) {
	moz-transform-origin: $origin;
	-o-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
	transform-origin: $origin;
}

@mixin break-word {
	-webkit-appearance: textarea;
	-webkit-rtl-ordering: logical;
	user-select: text;
	flex-direction: column;
	resize: auto;
	cursor: auto;
	white-space: pre-wrap;
	word-wrap: break-word;
}